domain_file,problem_file,domain_content,problem_content
problems/domain.pddl,problems/test/3/problem_test_3_scenario_0/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_0)
    (:domain block-world)

    (:objects
        orange red yellow - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear yellow)
        (on yellow orange)
        (ontable orange)
        (ontable red)
    )

    (:goal
        (and
            (clear red)
            (clear yellow)
            (on red orange)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_1/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_1)
    (:domain block-world)

    (:objects
        black green white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear green)
        (on green white)
        (ontable black)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (on black green)
            (on green white)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_2/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_2)
    (:domain block-world)

    (:objects
        blue orange white - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear white)
        (on orange blue)
        (ontable blue)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (on orange white)
            (on white blue)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_3/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_3)
    (:domain block-world)

    (:objects
        blue green red - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear red)
        (ontable blue)
        (ontable green)
        (ontable red)
    )

    (:goal
        (and
            (clear green)
            (on green red)
            (on red blue)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_4/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_4)
    (:domain block-world)

    (:objects
        orange purple red - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear red)
        (on red purple)
        (ontable orange)
        (ontable purple)
    )

    (:goal
        (and
            (clear purple)
            (clear red)
            (on red orange)
            (ontable orange)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_5/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_5)
    (:domain block-world)

    (:objects
        blue orange red - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (on blue red)
        (on orange blue)
        (ontable red)
    )

    (:goal
        (and
            (clear blue)
            (on blue red)
            (on red orange)
            (ontable orange)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_6/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_6)
    (:domain block-world)

    (:objects
        orange red yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear red)
        (clear yellow)
        (ontable orange)
        (ontable red)
        (ontable yellow)
    )

    (:goal
        (and
            (clear orange)
            (on orange yellow)
            (on yellow red)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_7/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_7)
    (:domain block-world)

    (:objects
        black purple yellow - block
    )

    (:init
        (arm-empty)
        (clear yellow)
        (on purple black)
        (on yellow purple)
        (ontable black)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (on black yellow)
            (ontable purple)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_8/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_8)
    (:domain block-world)

    (:objects
        orange purple white - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear purple)
        (clear white)
        (ontable orange)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (clear purple)
            (clear white)
            (ontable orange)
            (ontable purple)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_9/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_9)
    (:domain block-world)

    (:objects
        blue purple yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear purple)
        (clear yellow)
        (ontable blue)
        (ontable purple)
        (ontable yellow)
    )

    (:goal
        (and
            (clear purple)
            (clear yellow)
            (on purple blue)
            (ontable blue)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_10/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_10)
    (:domain block-world)

    (:objects
        purple red white - block
    )

    (:init
        (arm-empty)
        (clear red)
        (on purple white)
        (on red purple)
        (ontable white)
    )

    (:goal
        (and
            (clear red)
            (on purple white)
            (on red purple)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_11/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_11)
    (:domain block-world)

    (:objects
        blue red yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear red)
        (clear yellow)
        (ontable blue)
        (ontable red)
        (ontable yellow)
    )

    (:goal
        (and
            (clear blue)
            (clear yellow)
            (on blue red)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_12/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_12)
    (:domain block-world)

    (:objects
        black white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (clear yellow)
        (ontable black)
        (ontable white)
        (ontable yellow)
    )

    (:goal
        (and
            (clear black)
            (clear white)
            (clear yellow)
            (ontable black)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_13/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_13)
    (:domain block-world)

    (:objects
        black purple white - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (clear white)
        (on purple black)
        (ontable black)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (on purple white)
            (ontable black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_14/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_14)
    (:domain block-world)

    (:objects
        green white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (on green white)
        (on white yellow)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (clear yellow)
            (ontable green)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_15/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_15)
    (:domain block-world)

    (:objects
        blue red white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear white)
        (on white red)
        (ontable blue)
        (ontable red)
    )

    (:goal
        (and
            (clear red)
            (clear white)
            (on white blue)
            (ontable blue)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_16/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_16)
    (:domain block-world)

    (:objects
        orange purple white - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear purple)
        (on purple white)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (on orange purple)
            (on purple white)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_17/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_17)
    (:domain block-world)

    (:objects
        black purple white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on black purple)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear white)
            (on white purple)
            (ontable black)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_18/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_18)
    (:domain block-world)

    (:objects
        black green white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on white green)
        (ontable black)
        (ontable green)
    )

    (:goal
        (and
            (clear green)
            (on black white)
            (on green black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_19/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_19)
    (:domain block-world)

    (:objects
        blue green yellow - block
    )

    (:init
        (arm-empty)
        (clear yellow)
        (on green blue)
        (on yellow green)
        (ontable blue)
    )

    (:goal
        (and
            (clear blue)
            (clear yellow)
            (on yellow green)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_20/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_20)
    (:domain block-world)

    (:objects
        black orange white - block
    )

    (:init
        (arm-empty)
        (clear white)
        (on black orange)
        (on white black)
        (ontable orange)
    )

    (:goal
        (and
            (clear black)
            (clear orange)
            (clear white)
            (ontable black)
            (ontable orange)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_21/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_21)
    (:domain block-world)

    (:objects
        green white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear yellow)
        (on yellow white)
        (ontable green)
        (ontable white)
    )

    (:goal
        (and
            (clear green)
            (clear yellow)
            (on green white)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_22/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_22)
    (:domain block-world)

    (:objects
        green white yellow - block
    )

    (:init
        (arm-empty)
        (clear white)
        (on white yellow)
        (on yellow green)
        (ontable green)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (on green yellow)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_23/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_23)
    (:domain block-world)

    (:objects
        green red yellow - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear yellow)
        (on red green)
        (ontable green)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (on green yellow)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/3/problem_test_3_scenario_24/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_3_scenario_24)
    (:domain block-world)

    (:objects
        green white yellow - block
    )

    (:init
        (arm-empty)
        (clear white)
        (on white yellow)
        (on yellow green)
        (ontable green)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (on green yellow)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_0/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_0)
    (:domain block-world)

    (:objects
        green red white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear red)
        (clear white)
        (on red yellow)
        (ontable green)
        (ontable white)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (on green white)
            (on white yellow)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_1/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_1)
    (:domain block-world)

    (:objects
        black blue green orange - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear green)
        (on black blue)
        (on blue orange)
        (ontable green)
        (ontable orange)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on green orange)
            (on orange black)
            (ontable black)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_2/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_2)
    (:domain block-world)

    (:objects
        black orange white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear yellow)
        (on black white)
        (on yellow orange)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (on black white)
            (on orange yellow)
            (on yellow black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_3/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_3)
    (:domain block-world)

    (:objects
        black green orange white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on black green)
        (on green orange)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear white)
            (on green orange)
            (on white green)
            (ontable black)
            (ontable orange)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_4/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_4)
    (:domain block-world)

    (:objects
        blue green purple yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear yellow)
        (on blue purple)
        (ontable green)
        (ontable purple)
        (ontable yellow)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (clear yellow)
            (on green purple)
            (ontable blue)
            (ontable purple)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_5/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_5)
    (:domain block-world)

    (:objects
        black green orange red - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear red)
        (on orange green)
        (on red black)
        (ontable black)
        (ontable green)
    )

    (:goal
        (and
            (clear black)
            (clear green)
            (on green orange)
            (on orange red)
            (ontable black)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_6/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_6)
    (:domain block-world)

    (:objects
        blue orange red white - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear white)
        (on red blue)
        (on white orange)
        (ontable blue)
        (ontable orange)
    )

    (:goal
        (and
            (clear blue)
            (clear orange)
            (clear red)
            (on orange white)
            (ontable blue)
            (ontable red)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_7/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_7)
    (:domain block-world)

    (:objects
        blue green orange red - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear orange)
        (on green red)
        (on red blue)
        (ontable blue)
        (ontable orange)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on green red)
            (on red orange)
            (ontable blue)
            (ontable orange)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_8/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_8)
    (:domain block-world)

    (:objects
        blue orange red yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (on blue orange)
        (on orange yellow)
        (on yellow red)
        (ontable red)
    )

    (:goal
        (and
            (clear blue)
            (clear orange)
            (clear red)
            (on red yellow)
            (ontable blue)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_9/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_9)
    (:domain block-world)

    (:objects
        blue green red white - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear white)
        (on blue green)
        (on white blue)
        (ontable green)
        (ontable red)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (on red blue)
            (on white red)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_10/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_10)
    (:domain block-world)

    (:objects
        black blue green orange - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (on black green)
        (on blue black)
        (on green orange)
        (ontable orange)
    )

    (:goal
        (and
            (clear black)
            (clear blue)
            (on black orange)
            (on orange green)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_11/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_11)
    (:domain block-world)

    (:objects
        black blue orange yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear blue)
        (clear yellow)
        (on yellow orange)
        (ontable black)
        (ontable blue)
        (ontable orange)
    )

    (:goal
        (and
            (clear orange)
            (clear yellow)
            (on orange blue)
            (on yellow black)
            (ontable black)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_12/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_12)
    (:domain block-world)

    (:objects
        green red white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear red)
        (on red white)
        (on white yellow)
        (ontable green)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (clear yellow)
            (on green red)
            (ontable red)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_13/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_13)
    (:domain block-world)

    (:objects
        green purple red white - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (clear red)
        (clear white)
        (on white green)
        (ontable green)
        (ontable purple)
        (ontable red)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (clear white)
            (on white purple)
            (ontable green)
            (ontable purple)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_14/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_14)
    (:domain block-world)

    (:objects
        blue purple red yellow - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (clear red)
        (on red yellow)
        (on yellow blue)
        (ontable blue)
        (ontable purple)
    )

    (:goal
        (and
            (clear blue)
            (clear purple)
            (clear red)
            (on purple yellow)
            (ontable blue)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_15/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_15)
    (:domain block-world)

    (:objects
        blue green orange red - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (on blue red)
        (on red orange)
        (ontable green)
        (ontable orange)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (on blue orange)
            (on green blue)
            (ontable orange)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_16/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_16)
    (:domain block-world)

    (:objects
        orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear purple)
        (on purple yellow)
        (on yellow white)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (clear purple)
            (clear white)
            (clear yellow)
            (ontable orange)
            (ontable purple)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_17/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_17)
    (:domain block-world)

    (:objects
        orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear white)
        (on orange yellow)
        (on yellow purple)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear orange)
            (clear white)
            (clear yellow)
            (on yellow purple)
            (ontable orange)
            (ontable purple)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_18/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_18)
    (:domain block-world)

    (:objects
        black green purple white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on purple green)
        (on white purple)
        (ontable black)
        (ontable green)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (on green white)
            (on purple green)
            (ontable black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_19/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_19)
    (:domain block-world)

    (:objects
        blue green purple red - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear purple)
        (clear red)
        (on purple green)
        (ontable blue)
        (ontable green)
        (ontable red)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on blue purple)
            (on green red)
            (ontable purple)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_20/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_20)
    (:domain block-world)

    (:objects
        black orange white yellow - block
    )

    (:init
        (arm-empty)
        (clear white)
        (clear yellow)
        (on orange black)
        (on white orange)
        (ontable black)
        (ontable yellow)
    )

    (:goal
        (and
            (clear black)
            (clear white)
            (on black orange)
            (on white yellow)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_21/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_21)
    (:domain block-world)

    (:objects
        black blue purple white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear blue)
        (clear purple)
        (on purple white)
        (ontable black)
        (ontable blue)
        (ontable white)
    )

    (:goal
        (and
            (clear purple)
            (clear white)
            (on black blue)
            (on white black)
            (ontable blue)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_22/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_22)
    (:domain block-world)

    (:objects
        blue green purple red - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear red)
        (on purple green)
        (on red purple)
        (ontable blue)
        (ontable green)
    )

    (:goal
        (and
            (clear blue)
            (clear purple)
            (on blue green)
            (on green red)
            (ontable purple)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_23/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_23)
    (:domain block-world)

    (:objects
        blue green orange yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear yellow)
        (on yellow orange)
        (ontable blue)
        (ontable green)
        (ontable orange)
    )

    (:goal
        (and
            (clear yellow)
            (on green orange)
            (on orange blue)
            (on yellow green)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/4/problem_test_4_scenario_24/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_4_scenario_24)
    (:domain block-world)

    (:objects
        black blue white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (on black yellow)
        (on blue white)
        (on yellow blue)
        (ontable white)
    )

    (:goal
        (and
            (clear blue)
            (clear yellow)
            (on white black)
            (on yellow white)
            (ontable black)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_0/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_0)
    (:domain block-world)

    (:objects
        blue green purple red white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear red)
        (on blue purple)
        (on red white)
        (on white green)
        (ontable green)
        (ontable purple)
    )

    (:goal
        (and
            (clear blue)
            (clear purple)
            (on blue white)
            (on purple red)
            (on white green)
            (ontable green)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_1/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_1)
    (:domain block-world)

    (:objects
        black blue green purple red - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear purple)
        (clear red)
        (on green black)
        (on red green)
        (ontable black)
        (ontable blue)
        (ontable purple)
    )

    (:goal
        (and
            (clear blue)
            (clear purple)
            (clear red)
            (on blue green)
            (on red black)
            (ontable black)
            (ontable green)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_2/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_2)
    (:domain block-world)

    (:objects
        black green orange white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on black yellow)
        (on green orange)
        (on white green)
        (ontable orange)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear white)
            (clear yellow)
            (on green orange)
            (on orange black)
            (ontable black)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_3/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_3)
    (:domain block-world)

    (:objects
        black blue green purple white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear purple)
        (clear white)
        (on blue black)
        (ontable black)
        (ontable green)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (on blue white)
            (on green blue)
            (on purple green)
            (ontable black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_4/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_4)
    (:domain block-world)

    (:objects
        blue orange purple red white - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear white)
        (on orange purple)
        (on red blue)
        (on white orange)
        (ontable blue)
        (ontable purple)
    )

    (:goal
        (and
            (clear purple)
            (clear white)
            (on blue orange)
            (on purple red)
            (on red blue)
            (ontable orange)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_5/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_5)
    (:domain block-world)

    (:objects
        black green orange purple yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear yellow)
        (on black green)
        (on yellow purple)
        (ontable green)
        (ontable orange)
        (ontable purple)
    )

    (:goal
        (and
            (clear green)
            (clear orange)
            (on black purple)
            (on orange black)
            (on purple yellow)
            (ontable green)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_6/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_6)
    (:domain block-world)

    (:objects
        black blue orange purple yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear purple)
        (clear yellow)
        (on yellow blue)
        (ontable black)
        (ontable blue)
        (ontable orange)
        (ontable purple)
    )

    (:goal
        (and
            (clear black)
            (on black purple)
            (on orange yellow)
            (on purple orange)
            (on yellow blue)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_7/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_7)
    (:domain block-world)

    (:objects
        black blue red white yellow - block
    )

    (:init
        (arm-empty)
        (clear red)
        (on black yellow)
        (on blue white)
        (on red blue)
        (on white black)
        (ontable yellow)
    )

    (:goal
        (and
            (clear blue)
            (clear red)
            (clear white)
            (on black yellow)
            (on red black)
            (ontable blue)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_8/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_8)
    (:domain block-world)

    (:objects
        blue green orange white yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear yellow)
        (on green white)
        (on yellow orange)
        (ontable blue)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear white)
            (on blue orange)
            (on green yellow)
            (on white green)
            (on yellow blue)
            (ontable orange)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_9/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_9)
    (:domain block-world)

    (:objects
        black orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear yellow)
        (on black orange)
        (on red white)
        (on white black)
        (on yellow red)
        (ontable orange)
    )

    (:goal
        (and
            (clear black)
            (clear orange)
            (clear white)
            (clear yellow)
            (on orange red)
            (ontable black)
            (ontable red)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_10/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_10)
    (:domain block-world)

    (:objects
        black blue orange purple red - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear red)
        (on black purple)
        (on blue orange)
        (on purple blue)
        (ontable orange)
        (ontable red)
    )

    (:goal
        (and
            (clear orange)
            (clear red)
            (on black purple)
            (on orange black)
            (on purple blue)
            (ontable blue)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_11/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_11)
    (:domain block-world)

    (:objects
        blue green orange white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear orange)
        (on orange white)
        (on white yellow)
        (on yellow blue)
        (ontable blue)
        (ontable green)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on blue white)
            (on green yellow)
            (on white orange)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_12/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_12)
    (:domain block-world)

    (:objects
        black green orange red white - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear red)
        (on black white)
        (on orange black)
        (on white green)
        (ontable green)
        (ontable red)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (on orange black)
            (on red white)
            (on white orange)
            (ontable black)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_13/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_13)
    (:domain block-world)

    (:objects
        green orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear orange)
        (clear yellow)
        (on orange purple)
        (on yellow white)
        (ontable green)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear green)
            (clear orange)
            (clear yellow)
            (on green white)
            (on white purple)
            (ontable orange)
            (ontable purple)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_14/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_14)
    (:domain block-world)

    (:objects
        green orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear red)
        (clear yellow)
        (on green white)
        (on red green)
        (ontable orange)
        (ontable white)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear red)
            (clear yellow)
            (on orange white)
            (on yellow orange)
            (ontable green)
            (ontable red)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_15/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_15)
    (:domain block-world)

    (:objects
        green purple red white yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear red)
        (clear white)
        (clear yellow)
        (on red purple)
        (ontable green)
        (ontable purple)
        (ontable white)
        (ontable yellow)
    )

    (:goal
        (and
            (clear green)
            (clear purple)
            (on purple white)
            (on red yellow)
            (on white red)
            (ontable green)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_16/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_16)
    (:domain block-world)

    (:objects
        black blue green orange white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear white)
        (on black blue)
        (on blue orange)
        (on orange green)
        (ontable green)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear green)
            (clear orange)
            (on orange white)
            (on white blue)
            (ontable black)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_17/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_17)
    (:domain block-world)

    (:objects
        black blue green orange purple - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear blue)
        (clear orange)
        (clear purple)
        (on orange green)
        (ontable black)
        (ontable blue)
        (ontable green)
        (ontable purple)
    )

    (:goal
        (and
            (clear orange)
            (on black blue)
            (on blue purple)
            (on green black)
            (on orange green)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_18/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_18)
    (:domain block-world)

    (:objects
        black blue red white yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear yellow)
        (on black red)
        (on blue white)
        (on yellow black)
        (ontable red)
        (ontable white)
    )

    (:goal
        (and
            (clear blue)
            (clear red)
            (clear white)
            (on black yellow)
            (on white black)
            (ontable blue)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_19/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_19)
    (:domain block-world)

    (:objects
        blue green orange purple red - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (clear red)
        (on green orange)
        (on orange blue)
        (on purple green)
        (ontable blue)
        (ontable red)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on blue red)
            (on green purple)
            (on purple orange)
            (ontable orange)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_20/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_20)
    (:domain block-world)

    (:objects
        blue green orange purple white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear white)
        (on purple orange)
        (on white purple)
        (ontable blue)
        (ontable green)
        (ontable orange)
    )

    (:goal
        (and
            (clear blue)
            (clear white)
            (on green purple)
            (on orange green)
            (on white orange)
            (ontable blue)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_21/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_21)
    (:domain block-world)

    (:objects
        blue orange purple red white - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (on blue red)
        (on orange white)
        (on purple blue)
        (on red orange)
        (ontable white)
    )

    (:goal
        (and
            (clear blue)
            (clear orange)
            (on blue purple)
            (on purple red)
            (on red white)
            (ontable orange)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_22/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_22)
    (:domain block-world)

    (:objects
        black blue orange red yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (on orange yellow)
        (on red blue)
        (on yellow red)
        (ontable black)
        (ontable blue)
    )

    (:goal
        (and
            (clear blue)
            (clear red)
            (on orange yellow)
            (on red orange)
            (on yellow black)
            (ontable black)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_23/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_23)
    (:domain block-world)

    (:objects
        black blue orange purple red - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear purple)
        (on blue orange)
        (on purple red)
        (on red blue)
        (ontable black)
        (ontable orange)
    )

    (:goal
        (and
            (clear blue)
            (clear orange)
            (clear purple)
            (on orange red)
            (on purple black)
            (ontable black)
            (ontable blue)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/5/problem_test_5_scenario_24/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_5_scenario_24)
    (:domain block-world)

    (:objects
        black blue green purple yellow - block
    )

    (:init
        (arm-empty)
        (clear yellow)
        (on black green)
        (on blue black)
        (on green purple)
        (on yellow blue)
        (ontable purple)
    )

    (:goal
        (and
            (clear green)
            (clear purple)
            (on black blue)
            (on purple yellow)
            (on yellow black)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_0/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_0)
    (:domain block-world)

    (:objects
        blue green purple red white yellow - block
    )

    (:init
        (arm-empty)
        (clear red)
        (clear yellow)
        (on blue white)
        (on red purple)
        (on white green)
        (on yellow blue)
        (ontable green)
        (ontable purple)
    )

    (:goal
        (and
            (clear green)
            (clear purple)
            (on blue red)
            (on purple white)
            (on red yellow)
            (on white blue)
            (ontable green)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_1/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_1)
    (:domain block-world)

    (:objects
        black green orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear white)
        (on black green)
        (on purple yellow)
        (on white purple)
        (ontable green)
        (ontable orange)
        (ontable yellow)
    )

    (:goal
        (and
            (clear black)
            (clear orange)
            (clear white)
            (on black yellow)
            (on orange purple)
            (on yellow green)
            (ontable green)
            (ontable purple)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_2/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_2)
    (:domain block-world)

    (:objects
        black green orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear purple)
        (clear white)
        (on black green)
        (on purple yellow)
        (on yellow orange)
        (ontable green)
        (ontable orange)
        (ontable white)
    )

    (:goal
        (and
            (clear green)
            (clear orange)
            (clear purple)
            (clear white)
            (on black yellow)
            (on green black)
            (ontable orange)
            (ontable purple)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_3/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_3)
    (:domain block-world)

    (:objects
        black blue orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear white)
        (on black blue)
        (on orange black)
        (on red yellow)
        (on white red)
        (on yellow orange)
        (ontable blue)
    )

    (:goal
        (and
            (clear blue)
            (clear orange)
            (clear red)
            (on blue yellow)
            (on orange white)
            (on white black)
            (ontable black)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_4/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_4)
    (:domain block-world)

    (:objects
        black orange purple red white yellow - block
    )

    (:init
        (arm-empty)
        (clear purple)
        (clear yellow)
        (on orange red)
        (on purple orange)
        (on white black)
        (on yellow white)
        (ontable black)
        (ontable red)
    )

    (:goal
        (and
            (clear black)
            (clear orange)
            (clear red)
            (on orange purple)
            (on purple white)
            (on white yellow)
            (ontable black)
            (ontable red)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_5/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_5)
    (:domain block-world)

    (:objects
        blue green orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (on blue yellow)
        (on orange red)
        (on red white)
        (on white green)
        (on yellow orange)
        (ontable green)
    )

    (:goal
        (and
            (clear orange)
            (clear red)
            (on green white)
            (on orange yellow)
            (on white blue)
            (on yellow green)
            (ontable blue)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_6/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_6)
    (:domain block-world)

    (:objects
        blue green orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear red)
        (on blue yellow)
        (on green white)
        (on red green)
        (on white orange)
        (ontable orange)
        (ontable yellow)
    )

    (:goal
        (and
            (clear blue)
            (clear red)
            (clear yellow)
            (on blue white)
            (on red green)
            (on yellow orange)
            (ontable green)
            (ontable orange)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_7/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_7)
    (:domain block-world)

    (:objects
        black blue green purple red white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (on blue red)
        (on green purple)
        (on purple white)
        (on red green)
        (on white black)
        (ontable black)
    )

    (:goal
        (and
            (clear blue)
            (clear green)
            (on blue purple)
            (on green white)
            (on purple black)
            (on white red)
            (ontable black)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_8/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_8)
    (:domain block-world)

    (:objects
        black blue green orange red white - block
    )

    (:init
        (arm-empty)
        (clear blue)
        (clear green)
        (clear white)
        (on blue red)
        (on orange black)
        (on white orange)
        (ontable black)
        (ontable green)
        (ontable red)
    )

    (:goal
        (and
            (clear orange)
            (clear white)
            (on black green)
            (on orange blue)
            (on red black)
            (on white red)
            (ontable blue)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_9/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_9)
    (:domain block-world)

    (:objects
        black blue green orange red white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear red)
        (on black green)
        (on blue orange)
        (on green white)
        (on white blue)
        (ontable orange)
        (ontable red)
    )

    (:goal
        (and
            (clear black)
            (on black orange)
            (on blue red)
            (on green white)
            (on orange green)
            (on white blue)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_10/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_10)
    (:domain block-world)

    (:objects
        black blue green purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear blue)
        (clear white)
        (on black green)
        (on green yellow)
        (on yellow purple)
        (ontable blue)
        (ontable purple)
        (ontable white)
    )

    (:goal
        (and
            (clear black)
            (clear blue)
            (on black green)
            (on blue yellow)
            (on green purple)
            (on purple white)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_11/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_11)
    (:domain block-world)

    (:objects
        black blue green orange purple red - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear orange)
        (on green blue)
        (on orange red)
        (on purple black)
        (on red purple)
        (ontable black)
        (ontable blue)
    )

    (:goal
        (and
            (clear black)
            (clear blue)
            (clear green)
            (clear orange)
            (on black purple)
            (on purple red)
            (ontable blue)
            (ontable green)
            (ontable orange)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_12/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_12)
    (:domain block-world)

    (:objects
        black blue orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear white)
        (clear yellow)
        (on red blue)
        (on white red)
        (on yellow black)
        (ontable black)
        (ontable blue)
        (ontable orange)
    )

    (:goal
        (and
            (clear red)
            (clear white)
            (clear yellow)
            (on black blue)
            (on white orange)
            (on yellow black)
            (ontable blue)
            (ontable orange)
            (ontable red)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_13/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_13)
    (:domain block-world)

    (:objects
        black blue green orange purple yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear yellow)
        (on blue orange)
        (on orange purple)
        (on purple black)
        (on yellow blue)
        (ontable black)
        (ontable green)
    )

    (:goal
        (and
            (clear purple)
            (on black yellow)
            (on green black)
            (on orange green)
            (on purple orange)
            (on yellow blue)
            (ontable blue)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_14/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_14)
    (:domain block-world)

    (:objects
        black blue orange purple red yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear red)
        (on black purple)
        (on blue yellow)
        (on red blue)
        (ontable orange)
        (ontable purple)
        (ontable yellow)
    )

    (:goal
        (and
            (clear orange)
            (clear purple)
            (clear yellow)
            (on orange blue)
            (on red black)
            (on yellow red)
            (ontable black)
            (ontable blue)
            (ontable purple)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_15/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_15)
    (:domain block-world)

    (:objects
        black blue purple red white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear purple)
        (on black blue)
        (on blue white)
        (on red yellow)
        (on white red)
        (ontable purple)
        (ontable yellow)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (clear red)
            (clear white)
            (clear yellow)
            (on purple blue)
            (ontable black)
            (ontable blue)
            (ontable red)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_16/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_16)
    (:domain block-world)

    (:objects
        black green orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear purple)
        (on black white)
        (on white yellow)
        (on yellow green)
        (ontable green)
        (ontable orange)
        (ontable purple)
    )

    (:goal
        (and
            (clear green)
            (clear orange)
            (clear purple)
            (clear white)
            (clear yellow)
            (on orange black)
            (ontable black)
            (ontable green)
            (ontable purple)
            (ontable white)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_17/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_17)
    (:domain block-world)

    (:objects
        black green purple red white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear purple)
        (clear yellow)
        (on green white)
        (on purple green)
        (on white red)
        (ontable black)
        (ontable red)
        (ontable yellow)
    )

    (:goal
        (and
            (clear purple)
            (clear white)
            (on green black)
            (on purple yellow)
            (on red green)
            (on yellow red)
            (ontable black)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_18/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_18)
    (:domain block-world)

    (:objects
        black green orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear yellow)
        (on green purple)
        (on orange white)
        (on purple black)
        (on white green)
        (ontable black)
        (ontable yellow)
    )

    (:goal
        (and
            (clear orange)
            (clear yellow)
            (on black green)
            (on orange white)
            (on purple black)
            (on yellow purple)
            (ontable green)
            (ontable white)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_19/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_19)
    (:domain block-world)

    (:objects
        black blue green orange purple white - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (on blue black)
        (on green white)
        (on orange green)
        (on purple blue)
        (on white purple)
        (ontable black)
    )

    (:goal
        (and
            (clear black)
            (clear purple)
            (on black green)
            (on blue white)
            (on purple blue)
            (on white orange)
            (ontable green)
            (ontable orange)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_20/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_20)
    (:domain block-world)

    (:objects
        black green orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear orange)
        (clear white)
        (clear yellow)
        (on green red)
        (on white green)
        (ontable black)
        (ontable orange)
        (ontable red)
        (ontable yellow)
    )

    (:goal
        (and
            (clear black)
            (clear orange)
            (clear white)
            (on green yellow)
            (on red green)
            (on white red)
            (ontable black)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_21/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_21)
    (:domain block-world)

    (:objects
        black blue green purple red white - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear blue)
        (clear purple)
        (clear white)
        (on black red)
        (on blue green)
        (ontable green)
        (ontable purple)
        (ontable red)
        (ontable white)
    )

    (:goal
        (and
            (clear green)
            (on blue black)
            (on green purple)
            (on purple red)
            (on red white)
            (on white blue)
            (ontable black)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_22/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_22)
    (:domain block-world)

    (:objects
        black green orange purple red yellow - block
    )

    (:init
        (arm-empty)
        (clear green)
        (clear red)
        (on black yellow)
        (on green orange)
        (on orange purple)
        (on purple black)
        (ontable red)
        (ontable yellow)
    )

    (:goal
        (and
            (clear orange)
            (clear yellow)
            (on orange red)
            (on purple black)
            (on red green)
            (on yellow purple)
            (ontable black)
            (ontable green)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_23/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_23)
    (:domain block-world)

    (:objects
        black blue orange purple white yellow - block
    )

    (:init
        (arm-empty)
        (clear black)
        (clear yellow)
        (on blue purple)
        (on orange blue)
        (on purple white)
        (on yellow orange)
        (ontable black)
        (ontable white)
    )

    (:goal
        (and
            (clear blue)
            (clear white)
            (clear yellow)
            (on blue purple)
            (on purple orange)
            (on white black)
            (ontable black)
            (ontable orange)
            (ontable yellow)
        )
    )
)
"
problems/domain.pddl,problems/test/6/problem_test_6_scenario_24/problem.pddl,"(define (domain block-world)
  (:requirements :strips :typing)
  (:types block)

  (:predicates 
    (on ?x - block ?y - block)          ; block x is on block y
    (ontable ?x - block)                ; block x is on the table
    (clear ?x - block)                  ; block x has nothing on it
    (holding ?x - block)                ; the robot arm is holding block x
    (arm-empty)                         ; the robot arm is empty
  )

  (:action pick-up
    :parameters (?x - block)
    :precondition (and (ontable ?x) (clear ?x) (arm-empty))
    :effect (and (not (ontable ?x)) (not (arm-empty)) (holding ?x)))

  (:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (arm-empty) (ontable ?x)))

  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (arm-empty) (on ?x ?y)))

  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (arm-empty))
    :effect (and (not (on ?x ?y)) (not (arm-empty)) (holding ?x) (clear ?y)))
)","(define (problem problem_test_6_scenario_24)
    (:domain block-world)

    (:objects
        black blue orange red white yellow - block
    )

    (:init
        (arm-empty)
        (clear orange)
        (clear white)
        (clear yellow)
        (on orange red)
        (on red black)
        (on white blue)
        (ontable black)
        (ontable blue)
        (ontable yellow)
    )

    (:goal
        (and
            (clear orange)
            (clear white)
            (clear yellow)
            (on orange blue)
            (on red black)
            (on white red)
            (ontable black)
            (ontable blue)
            (ontable yellow)
        )
    )
)
"
